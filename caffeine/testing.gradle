/**
 * The configuration to break cache tests into independent tasks.
 */
tasks.named('test').configure {
  useTestNG()
  exclude 'com/github/benmanes/caffeine/cache/**'
}

def implementations = ['Caffeine', 'Guava']
def testNames = [
  'strongKeysAndStrongValues', 'strongKeysAndWeakValues', 'strongKeysAndSoftValues',
  'weakKeysAndStrongValues', 'weakKeysAndWeakValues', 'weakKeysAndSoftValues']
  .collectNested { [it, it + 'Stats'] }
  .collectNested { it.contains('StrongValues') ? [it + 'Sync', it + 'Async'] : (it + 'Sync') }
  .collectNested { type -> implementations.collect { type + it } }
  .collectNested { it ==~ /(?i).*(weak|soft).*/ ? [it, it + 'Slow'] : it }
  .flatten().collect { it + 'Test' }
  .findAll { !(it.contains('Guava') && it.contains('Async')) }

testNames.each { testName ->
  def isAsync = testName.contains('Async')
  def hasStats = testName.contains('Stats')
  def implementation = implementations.find { testName.contains(it) }
  def testType = testName - implementation - 'Test' - 'Stats' - 'Async' - 'Sync'
  def labels = testType.split('And').collect { it[0].toLowerCase() + it.substring(1) }

  tasks.register("${testName}", Test) {
    useTestNG()
    group = 'Cache tests'
    description = 'Runs ' + labels.join(' with ') +
      implementation + ' and ' + (hasStats ? 'stats ' : 'no stats ') +
      (isAsync ? 'asynchronous' : 'synchronous') + ' tests.'
    include 'com/github/benmanes/caffeine/cache/**'

    if (labels.size() == 2) {
      def strength = labels.collect{ it.split('Keys|Values') }.flatten()
      systemProperties [
        'keys': strength[0],
        'values': strength[1],
        'compute': isAsync ? 'async' : 'sync',
        'stats': hasStats ? 'enabled' : 'disabled',
      ]
    }
    systemProperty 'implementation', implementation

    enabled = (System.env.JITPACK != 'true')
    tasks.test.dependsOn(it)
  }
}

tasks.register('isolatedTest', Test) {
  group = 'Cache tests'
  description = 'Tests that must be run in isolation'
  useTestNG()
}

tasks.register('lincheckTest', Test) {
  group = 'Cache tests'
  description = 'Tests that assert linearizability'
  enabled = (System.env.JDK_EA != 'true')
  useTestNG()
}

def buildScanApi = project.extensions.findByName('buildScan')

tasks.register('junitTest', Test) {
  group = 'Cache tests'
  description = 'JUnit tests'

  useJUnit()
  dependsOn(jar)
  tasks.test.dependsOn(it)

  failFast = true
  maxHeapSize = '2g'
  systemProperty 'caffeine.osgi.jar', project(':caffeine').jar.archivePath.path


doFirst {
             systemProperties.forEach { key, val -> println "${identityPath}#sysProps-$key=$val" }
             systemProperties.forEach { key, val -> buildScan.value("${identityPath}#sysProps-$key", val) }
         }
}

tasks.withType(Test).configureEach {
  if (options instanceof TestNGOptions) {
    if (name.containsIgnoreCase('slow')) {
      maxParallelForks = 2
      jvmArgs '-XX:+UseParallelGC'
      options.includeGroups = ['slow']
    } else if (name.startsWith('isolated')) {
      options.includeGroups = ['isolated']
      maxHeapSize = '3g'
    } else if (name.startsWith('lincheck')) {
      options.includeGroups = ['lincheck']
      jvmArgs += [
        '--add-opens', 'java.base/jdk.internal.vm=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.access=ALL-UNNAMED',
        '--add-exports', 'java.base/jdk.internal.util=ALL-UNNAMED',
      ]
      testLogging.events 'started'
      maxHeapSize = '3g'
      failFast = true
    } else {
      options {
        threadCount = Math.max(6, Runtime.getRuntime().availableProcessors() - 1)
        excludeGroups = ['slow', 'isolated', 'lincheck']
        parallel = 'methods'
      }
      jvmArgs '-XX:+UseG1GC', '-XX:+ParallelRefProcEnabled'
    }
  }
}

class Stresser extends DefaultTask {
  @Input @Optional @Option(option = 'workload', description = 'The workload type')
  String operation

  @TaskAction def run() {
    project.javaexec {
      mainClass = 'com.github.benmanes.caffeine.cache.Stresser'
      classpath project.sourceSets.codeGen.runtimeClasspath
      classpath project.sourceSets.test.runtimeClasspath
      if (operation) {
        args '--workload', operation
      } else {
        args '--help'
      }
    }
  }
}
tasks.register('stress', Stresser) {
  group = 'Cache tests'
  description = 'Executes a stress test'
  notCompatibleWithConfigurationCache(
    'The stress task is not compatible with the configuration cache')
  outputs.upToDateWhen { false }
  dependsOn compileTestJava
}

import java.nio.charset.StandardCharsets
import java.security.MessageDigest

